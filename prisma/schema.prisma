// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  name         String        @unique
  team         Team          @relation(fields: [teamId], references: [id])
  teamId       Int
  checkInId    String        @unique
  role         Int           @default(0) // 0 User, 1 Admin 
  points       Int           @default(0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  checkInUser  CheckInUser[]
  shareMoments ShareMoment[]
  tags         Tag[]
}

model Team {
  id           Int            @id @default(autoincrement())
  name         String
  requestCoach RequestCoach[]
  users        User[]
}

model CheckIn {
  id          Int           @id @default(autoincrement())
  sessionName String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  checkInUser CheckInUser[]
}

model CheckInUser {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userCheckInId], references: [checkInId])
  userCheckInId String
  checkIn       CheckIn  @relation(fields: [checkInId], references: [id])
  checkInId     Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
}

model ShareMomentSession {
  id          Int           @id @default(autoincrement())
  sessionName String
  active      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  shareMoment ShareMoment[]
}

model ShareMoment {
  id                   Int                @id @default(autoincrement())
  shareMomementSession ShareMomentSession @relation(fields: [sessionId], references: [id])
  title                String
  sessionId            Int
  user                 User               @relation(fields: [userId], references: [id])
  userId               Int
  picture1             String
  picture2             String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @default(now()) @updatedAt
  tags                 Tag[]
}

model Tag {
  id            Int         @id @default(autoincrement())
  shareMoment   ShareMoment @relation(fields: [shareMomentId], references: [id])
  shareMomentId Int
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
}

model Coach {
  id           Int            @id @default(autoincrement())
  name         String
  picture      String
  active       Boolean        @default(false)
  requestCoach RequestCoach[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
}

model RequestCoach {
  id        Int      @id @default(autoincrement())
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    Int
  coach     Coach    @relation(fields: [coachId], references: [id])
  coachId   Int
  status    Int      @default(0)
  archived  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  place       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}
